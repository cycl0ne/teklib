
/*
**	atomterror.c
**	torture test for shared/exclusive use of a list,
**	which is protected with a named atom.
*/

#include <stdio.h>
#include <tek/teklib.h>
#include <tek/proto/exec.h>
#include <tek/proto/util.h>

struct global
{
	TLIST list;
	TAPTR task;
	TAPTR mmu;
	TUINT numnodes;
	TUINT maxnodes;
};

/* 
**	in this thread, rock over a list in either shared or exclusive mode
**	(depending on random numbers). if locked shared, the list is only
**	read, otherwise it is modified also. the atom must ensure list
**	integrity at any time.
*/

TTASKENTRY TVOID subfunc(TAPTR task)
{
	TAPTR TExecBase = TGetExecBase(task);
	struct global *g;
	TNODE *n, *t;
	TINT i, r;
	TUINT mode;
	TAPTR listatom;

	TAPTR TUtilBase = TExecOpenModule(TExecBase, "util", 0, TNULL);
	if (TUtilBase)
	{
		for (i = 0; i < 500; ++i)
		{
			mode = (TUtilGetRand(TUtilBase) % 2) * TATOMF_SHARED;

			listatom = TExecLockAtom(TExecBase, "list.atom", TATOMF_NAME | mode);
			if (listatom)
			{
				g = TExecGetAtomData(TExecBase, listatom);

				/* seek over the list to a random position */

				r = g->numnodes? TUtilGetRand(TUtilBase) % g->numnodes : 0;
				t = TUtilSeekNode(TUtilBase, TFirstNode(&g->list), r);

				if (mode != TATOMF_SHARED)
				{
					/* if the lock was exclusive, insert or remove a node here */

					if ((TUtilGetRand(TUtilBase) % 2))
					{
						n = TExecAlloc(TExecBase, g->mmu, sizeof(TNODE));
						if (n)
						{
							if (t)
							{
								TInsert(&g->list, n, t);
							}
							else
							{
								TAddTail(&g->list, n);
							}
							g->numnodes++;
							if (g->numnodes > g->maxnodes) g->maxnodes = g->numnodes;
						}
					}
					else
					{
						/* unlink and free that node */
					
						if (t)
						{
							TRemove(t);
							n = t;
						}
						else
						{
							n = TRemHead(&g->list);
						}

						if (n)
						{
							TExecFree(TExecBase, n);
							g->numnodes--;
						}
					}
				}
				TExecUnlockAtom(TExecBase, listatom, TATOMF_KEEP);
			}
			else printf("*** failed\n");
			
		}

		TExecCloseModule(TExecBase, TUtilBase);
	}
	else printf("*** failed to open utility module\n");
}


/* 
**	create a named atom, i.e. a global resource for the 
**	data structure, and then spawn 100 threads of the above.
*/

#define NUMTASKS 70

TTASKENTRY TVOID TEKMain(TAPTR task)
{
	struct global g;
	TAPTR TExecBase = TGetExecBase(task);
	//TTIME t1;
	TAPTR tasks[NUMTASKS];
	TINT i;
	
	/* create atom */
	
	TAPTR listatom = TExecLockAtom(TExecBase, "list.atom", TATOMF_NAME | TATOMF_CREATE);
	if (listatom)
	{
		g.task = task;
		g.mmu = TExecGetTaskMMU(TExecBase, task);
		g.numnodes = 0;
		g.maxnodes = 0;
		
		TInitList(&g.list);
	
		/* associate datapointer to the atom, and unlock. */
		
		TExecSetAtomData(TExecBase, listatom, &g);
		TExecUnlockAtom(TExecBase, listatom, TATOMF_KEEP);
	
		/* create threads */	
	
		for (i = 0; i < NUMTASKS; ++i)
		{
			tasks[i] = TExecCreateTask(TExecBase, subfunc, TNULL, TNULL);
			if (!tasks[i]) printf("error\n");
		}
		
		/* destroy threads */	
	
		for (i = 0; i < NUMTASKS; ++i)
		{
			TDestroy(tasks[i]);
		}

		/* destroy atom */	
	
		TExecLockAtom(TExecBase, listatom, TATOMF_DESTROY);

		printf("all done\n");

	}
	else printf("*** failed to create atom\n");

	//TQueryTime(task, &t1);
	//printf("all done. time elapsed: %.3fs\n", TTimeToF(&t1));
}

